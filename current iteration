#import the modules
import pygame, os, random
os.environ['SDL_VIDEO_CENTERED'] = '1'

#initialise pygame
pygame.font.init()

#set colours
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)

turn = 0

class Player(pygame.sprite.Sprite):
    def __init__(self, position_x, position_y, hpposition_x, hp):
        super().__init__()
        self.position_x = position_x
        self.position_y = position_y
        self.hpposition_x = hpposition_x
        self.hpposition_y = position_y
        self.hp = hp
        
    def blitPlayer(self):
        self.image = pygame.Surface((100,100))
        self.image.fill(BLUE)
        self.rect = self.image.get_rect()
        game.screen.blit(self.image, (self.position_x, self.position_y))

    def blitHealth(self):
        heart = pygame.image.load('heart.png')
        hp_str = str(self.hp)
        hpFont = pygame.font.Font(None, 50)
        hpText = hpFont.render(hp_str, True, BLACK, WHITE)
        game.screen.blit(heart, (self.hpposition_x, self.hpposition_y))
        game.screen.blit(hpText, (self.hpposition_x, self.hpposition_y + 60))

    def checkHealth(self):
        if self.hp <= 0:
            game.running = False
        

    #function when a heal card is played, also ensures health does not exceed 100.
    def heal(self):
        if self.hp <= 85:
            self.hp += 15
        elif hp > 85:
            self.hp = 100

    #function when an attack card is drawn
    def attacked(self):
        self.hp -= 20
    
    #function for computer, allows them to make a decision to play/draw - for now i will keep this random
    def comDecisions():
        #draw a card if their hand is empty
        if len(cpuHand) == 0:
            cpuHand.drawCards_c()
        #random choice for the computer if they have cards in their hand, for now
        else:
            choice = random.randint(0, 1)
            if choice == 0:
                cpuHand.drawCards_c()
            else:
                played = cpuHand.cards.pop(0)
                PlayPile.move_card(played)         

    
class Card(pygame.sprite.Sprite):
    def __init__(self, game):
        super().__init__()
        self.game = game
        self.face = "down" #cards start off face down in pile
        self.image = pygame.Surface((120, 180)) #cards width and height
        Card.faceColour(self, self.face)
        self.image.fill(self.colour) #fill the card with the corresponding colour
        self.rect = self.image.get_rect() #create the card object
        self.in_hand = False

    def faceColour(self, face):
        if self.face == "down":
            self.colour = BLACK #back of card will be black (placeholder) for now
        else:
             self.colour = WHITE #generic for now, white background
        return self.colour

    def flip(self):
        self.face = "up"
        self.faceColour(self.face) #flip the card over to display upwards
        self.update()

    def on_click(self, mouse_pos):
        print("checking")
        if game.mouse_pressed == 1 and self.rect.collidepoint(mouse_pos) and self.in_hand == False:
            print("deck click")
            humanHand.drawCards_p()
        elif game.mouse_pressed == 1 and self.rect.collidepoint(mouse_pos) and self.in_hand == True:
            print("hand card click")
            playCards(clicked)
        else:
            print("no card clicked")


class Deck():
    def __init__(self):
        self.cards = []
        self.allCards = pygame.sprite.Group()

    def initialiseDeck(self,game):
        for i in range(30):
            card = Card(self)
            self.cards.append(Card(self)) #adds 30 cards to the pile
            self.allCards.add(card) #create a group of all cards in the game to loop through
        random.shuffle(self.cards) #shuffle the deck
        return self.cards

    def shuffle(self):
        random.shuffle(self.cards) #shuffles the cards, changes order - useful when card types added, and can later add shuffle card?
        return self.cards

    def blitDeck(self):
        if len(self.cards) == 1:
            game.screen.blit(self.cards[0].image, (500, 300))
        elif len(self.cards) >= 2:
            game.screen.blit(self.cards[1].image, (500, 300))
            game.screen.blit(self.cards[0].image, (500, 300))


class PlayerHand():
    def __init__(self, game):
        self.hand = []
        self.game = game

    def initialiseHand(self):
        if turn == 0:
            for i in range(5):
                self.drawCards_p()
        else:
            for i in range(5):
                self.drawCards_c()
        return self.hand


    def blitHand_p(self):
        handPos_x = 250
        handPos_y = 650
        for card in range(len(self.hand)):
            self.game.screen.blit(self.hand[card].image, (handPos_x, handPos_y))
            handPos_x += 130

    def blitHand_c(self):
        handPos_x = 1190
        handPos_y = 30
        for card in range(len(self.hand)):
            self.game.screen.blit(self.hand[card].image, (handPos_x, handPos_y))
            handPos_x -= 130

    def drawCards_p(self):
        global turn
        drawn = self.game.deck.cards.pop(0)
        drawn.flip()
        self.hand.append(drawn)
        drawn.in_hand = True
        #human.checkHealth()
        turn += 1

    def drawCards_c(self):
        global turn
        drawn = self.game.deck.cards.pop(0)
        self.hand.append(drawn)
        #cpu.checkHealth()
        turn -= 1



class PlayPile():
    def __init__(self):
        self.cardsPlayed = []
        
    def move_card(self, playedCard):
        self.card_on_top = playedCard
        playedCard = Card.flip(playedCard)
        self.cardsPlayed.append(playedCard)

    def blitPlayed(self):
        screen.blit(self.cardsPlayed[0].image, (800, 300))


class Game():
    def __init__(self, human, cpu):
        pygame.init()
        self.clock = pygame.time.Clock()
        self.screen = pygame.display.set_mode((1530, 790))
        pygame.display.set_caption("Card game")
        self.fps = 60
        self.deck = Deck()
        self.deck.initialiseDeck(self)
        self.humanHand = PlayerHand(self)
        self.humanHand.initialiseHand()
        self.cpuHand = PlayerHand(self)
        self.cpuHand.initialiseHand()
        self.human = human
        self.cpu = cpu

    def events(self):
        self.mouse_pressed = 0
        self.mouse_pos = pygame.mouse.get_pos()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.running = False
            elif event.type == pygame.MOUSEBUTTONDOWN:
                self.mouse_pressed = event.button
                if self.mouse_pressed == 1:
                    for card in self.deck.allCards.sprites():
                        print("click")
                        card.on_click(self.mouse_pos)
                
    def draw(self):
        background()
        self.deck.blitDeck()
        self.human.blitPlayer()
        self.human.blitHealth()
        self.humanHand.blitHand_p()
        self.cpu.blitHealth()
        self.cpu.blitPlayer()
        self.cpuHand.blitHand_c()
        notifications(turn)
        pygame.display.update()

    def run(self):
        self.running = True
        while self.running:
            self.clock.tick(self.fps)
            self.draw()
            self.events()
        pygame.quit()


#when a player decides to draw a card, this will be carried out
#applies to human only
def playCards(clicked):
    playedCard = clicked
    humanHand.cards.pop(playedCard)
    PlayPile.move_card(playedCard)
    

#blit the background onto the screen
def background():
    bg = pygame.image.load('Scene-1_resized.jpg').convert_alpha()
    game.screen.blit(bg, (0, 0))

def notifications(turn):
    notificationFont = pygame.font.Font(None, 50)
    if turn == 0:
        current = notificationFont.render("It's your turn.", True, BLACK, WHITE)
        game.screen.blit(current, (10, 10))
    elif turn == 1:
        current = notificationFont.render("It's your opponent's turn.", True, BLACK, WHITE)
        game.screen.blit(current, (10, 10))


#create 2 players, human and computer with positions of where they will be drawn (x and y) and their initial hp, set to max
human = Player(60, 650, 180, 100)
cpu = Player(1400, 30, 1320, 100)

game = Game(human, cpu)
game.run()
